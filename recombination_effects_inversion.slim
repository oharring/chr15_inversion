// let p1=forest (SW), p2=prairie (BK)


// set up ancestral population 
initialize() {
	if (!exists("burn_in")) // total time for simulation
		defineConstant("burn_in",1);
	print(paste("burn_in:"+burn_in));
	if (!exists("scalar")) // scale parameters
		defineConstant("scalar",1000);
	print(paste("scalar:"+scalar));
	if (!exists("NPOP_ANC_initial")) // initial ancestral population size
		defineConstant("NPOP_ANC_initial",10);
	print(paste("NPOP_ANC_initial:"+NPOP_ANC_initial));
	if (!exists("NPOP_ANC")) // updated ancestral population size
		defineConstant("NPOP_ANC",10);
	print(paste("NPOP_ANC:"+NPOP_ANC));
	if (!exists("NPOP_second_SW")) // initial p1 size at split 
		defineConstant("NPOP_second_SW",10);
	print(paste("NPOP_second_SW:"+NPOP_second_SW));
	if (!exists("NPOP_second_BK")) // initial p2 size at split 
		defineConstant("NPOP_second_BK",10);
	print(paste("NPOP_second_BK:"+NPOP_second_BK));
	if (!exists("NPOP_first_SW")) // updated p1 size at time of first size change
		defineConstant("NPOP_first_SW",10);
	print(paste("NPOP_first_SW:"+NPOP_first_SW));
	if (!exists("NPOP_first_BK")) // updated p2 size at time of first size change
		defineConstant("NPOP_first_BK",10);
	print(paste("NPOP_first_BK:"+NPOP_first_BK));
	if (!exists("NPOP_SW")) // updated p1 size at second size change
		defineConstant("NPOP_SW",10);
	print(paste("NPOP_SW:"+NPOP_SW));
	if (!exists("NPOP_BK")) // updated p2 size at second size change
		defineConstant("NPOP_BK",10);
	print(paste("NPOP_BK:"+NPOP_BK));
	if (!exists("TSIZECHANGE_ANC")) // time of ancestral population size change
		defineConstant("TSIZECHANGE_ANC", 10);
	print(paste("TSIZECHANGE_ANC:"+TSIZECHANGE_ANC));
	if (!exists("TDIV")) // time of population split
		defineConstant("TDIV", 10);
	print(paste("TDIV:"+TDIV));
	if (!exists("BMIG_BK_to_SW")) // initial migration rate from p1 (SW) to p2 (BK) which corresponds to migration from BK to SW in fastsimcoal backwards in time model
		defineConstant("BMIG_BK_to_SW",0.1);
	print(paste("BMIG_BK_to_SW:"+BMIG_BK_to_SW));
	if (!exists("BMIG_SW_to_BK")) // initial migration rate from p2 to p1
		defineConstant("BMIG_SW_to_BK",0.1);
	print(paste("BMIG_SW_to_BK:"+BMIG_SW_to_BK));
	if (!exists("AMIG_BK_to_SW")) // updated migration rate from p1 to p2
		defineConstant("AMIG_BK_to_SW",0.1);
	print(paste("AMIG_BK_to_SW:"+AMIG_BK_to_SW));
	if (!exists("AMIG_SW_to_BK")) // updated migration rate from p2 to p1
		defineConstant("AMIG_SW_to_BK",0.1);
	print(paste("AMIG_SW_to_BK:"+AMIG_SW_to_BK));
	if (!exists("TSIZECHANGE_second_SW")) // time of size change for p1
		defineConstant("TSIZECHANGE_second_SW",10);
	print(paste("TSIZECHANGE_second_SW:"+TSIZECHANGE_second_SW));
	if (!exists("TSIZECHANGE_second_BK")) // time of size change for p2
		defineConstant("TSIZECHANGE_second_BK",10);
	print(paste("TSIZECHANGE_second_BK:"+TSIZECHANGE_second_BK));
	if (!exists("TSIZECHANGE_first_SW")) // time of second size change for p1
		defineConstant("TSIZECHANGE_first_SW",10);
	print(paste("TSIZECHANGE_first_SW:"+TSIZECHANGE_first_SW));
	if (!exists("TSIZECHANGE_first_BK")) // time of second size change for p2
		defineConstant("TSIZECHANGE_first_BK",10);
	print(paste("TSIZECHANGE_first_BK:"+TSIZECHANGE_first_BK));
	if (!exists("TMIGAtoB")) // time of migration rate change
		defineConstant("TMIGAtoB",10);
	print(paste("TMIGAtoB:"+TMIGAtoB));
	if (!exists("final_gen")) // final generation of simulation
		defineConstant("final_gen",100);
	print(paste("final_gen:"+final_gen));
	if (!exists("uniq_id")) // unique identifier for each simulation
		defineConstant("uniq_id",1);
	print(paste("uniq_id: "+uniq_id));
	if (!exists("file_name")) // name out output file
		defineConstant("file_name","testfile.txt");
	if (!exists("tree_name")) // name of treeseq output file
		defineConstant("tree_name","testtree.trees");
	if (!exists("genome_size")) // set size of genome to 400kb = 40Mb/scalar
		defineConstant("genome_size",400000);
	if (!exists("recombination_rate")) // set recombination rate
		defineConstant("recombination_rate",0.5e-8);
	if (!exists("forest_selection")) // inversion selection coefficient in forest population
		defineConstant("forest_selection",0.9);
	print(paste("forest_selection:"+forest_selection));
	if (!exists("prairie_selection")) // inversion selection coefficient in prairie population (homozygotes)
		defineConstant("prairie_selection",0.98);
	print(paste("prairie_selection:"+prairie_selection));
	if (!exists("prairie_selection_het")) // inversion selection coefficient in prairie population (heterozygotes)
		defineConstant("prairie_selection_het",0.99);
	print(paste("prairie_selection_het:"+prairie_selection_het));
	if (!exists("time_inversion_introduce")) // time when inversion selection introduced
		defineConstant("time_inversion_introduce",5);
	print(paste("time_inversion_introduce:"+time_inversion_introduce));
	if (!exists("locA_f_selection")) // locus A selection coefficient in forest population
		defineConstant("locA_f_selection",0.9);
	print(paste("locA_f_selection:"+locA_f_selection));
	if (!exists("locB_f_selection")) // locus B selection coefficient in forest population
		defineConstant("locB_f_selection",0.9);
	print(paste("locB_f_selection:"+locB_f_selection));
	if (!exists("locA_p_selection")) // locus A selection coefficient in prairie population
		defineConstant("locA_p_selection",0.98);
	print(paste("locA_p_selection:"+locA_p_selection));
	if (!exists("locA_p_selection_het")) // locus A selection coefficient in prairie population (heterozygotes)
		defineConstant("locA_p_selection_het",0.99);
	print(paste("locA_p_selection_het:"+locA_p_selection_het));
	if (!exists("locB_p_selection")) // locus B selection coefficient in prairie population
		defineConstant("locB_p_selection",0.98);
	print(paste("locB_p_selection:"+locB_p_selection));
	if (!exists("locB_p_selection_het")) // locus B selection coefficient in prairie population (heterozygotes)
		defineConstant("locB_p_selection_het",0.99);
	print(paste("locB_p_selection_het:"+locB_p_selection_het));
	initializeMutationRate(5.3e-9*scalar); // set mutation rate 
	initializeRecombinationRate(recombination_rate); // see pg. 120 of Slim manual for recombination rate scaling
	initializeMutationType("m1", 0.5, "s", "return runif(1, -0.000117, -0.0000117);"); // create deleterious mutations drawn from uniform distribution -1 > 2Ns > -10, N=4.2M, make these semi-dominant, multiply by scalar
	initializeMutationType("m3", 0.5, "s", "return runif(1, -0.00117, -0.000117);"); // create deleterious mutations drawn from uniform distribution -10 > 2Ns > -100, N=4.2M, make these semi-dominant
	initializeMutationType("m6", 0.5, "s", "return runif(1, -0.0117, -0.00117);"); // create deleterious mutations drawn from uniform distribution -100 > 2Ns > -1000, N=4.2M, make these semi-dominant
	initializeMutationType("m7", 0.5, "f", 0); // create neutral mutations
	initializeMutationType("m2", 0.5, "f", forest_selection); // introduce inversion as a mutation with dominanace coefficient 0.5
	initializeGenomicElementType("g1", c(m1,m3,m7), c(1.0,1.0,1.0)); // set up genomic functional regions, with proportion of neutral, weakly, moderately, strongly deleterious mutations (m7, m1, m3, m6)
	// set up 6 genomic elements for functional regions	
	initializeGenomicElement(g1, 60001, 80000);
	initializeGenomicElement(g1, 110001, 119999); //this is one genomic element, without position for locus A so that mutations don't accumulate on top of A, only relevant for two-locus model simulations
	initializeGenomicElement(g1, 120001, 130000);
	initializeGenomicElement(g1, 160001, 180000);
	initializeGenomicElement(g1, 210001, 219999); //this is one genomic element, without position for locus B so that mutations don't accumulate on top of B, only relevant for two-locus model simulations
	initializeGenomicElement(g1, 220001, 230000);
	initializeGenomicElement(g1, 260001, 280000);
	initializeGenomicElement(g1, 310001, 330000);
}

// set inversion effect in p2 to be deleterious
fitness(m2, p2) { return homozygous ? prairie_selection else prairie_selection_het; } // different effects for homozygous versus heterozygous individuals

// suppress recombination when inversion marker is heterozygous
recombination() {
	if (genome1.containsMarkerMutation(m2, 25000) ==
		genome2.containsMarkerMutation(m2, 25000))
		return F;
	
	inInv = (breakpoints > 0) & (breakpoints < 400000);
	if (!any(inInv))
		return F;
	
	breakpoints = breakpoints[!inInv];
	return T;
}

// initial population is set up in generation 1 with initial number of indivs
1 { sim.addSubpop("p1", NPOP_ANC_initial);
	// reset time of the following blocks
	sim.rescheduleScriptBlock(s1, start=time_inversion_introduce, end=time_inversion_introduce); //introduce inversion 
	sim.rescheduleScriptBlock(s11, start=TSIZECHANGE_ANC, end=TSIZECHANGE_ANC);
	sim.rescheduleScriptBlock(s2, start=TDIV, end=TDIV);
	sim.rescheduleScriptBlock(s3, start=TDIV, end=TDIV);
	sim.rescheduleScriptBlock(s4, start=TDIV, end=TDIV);
	sim.rescheduleScriptBlock(s5, start=TSIZECHANGE_second_SW, end=TSIZECHANGE_second_SW);
	sim.rescheduleScriptBlock(s6, start=TSIZECHANGE_second_BK, end=TSIZECHANGE_second_BK);
	sim.rescheduleScriptBlock(s7, start=TSIZECHANGE_first_SW, end=TSIZECHANGE_first_SW);
	sim.rescheduleScriptBlock(s8, start=TSIZECHANGE_first_BK, end=TSIZECHANGE_first_BK);
	sim.rescheduleScriptBlock(s9, start=TMIGAtoB, end=TMIGAtoB);
	sim.rescheduleScriptBlock(s13, start=time_inversion_introduce+2, end=final_gen);
	sim.rescheduleScriptBlock(s10, start=final_gen, end=final_gen);
}

// introduce inversion into forest population as one copy
s1 10 late() {
	target = sample(p1.genomes, 1); // use sample to ensure random individual
	target.addNewDrawnMutation(m2, 25000); // introduce inversion into population, with genomic position
}

// change ancestral population size
s11 20 { p1.setSubpopulationSize(NPOP_ANC); }

// population split
s2 20 {
	sim.addSubpopSplit("p2", NPOP_second_BK, p1);
}

// set migration rates at same time as population split
s3 20 {
	p1.setMigrationRates(p2, BMIG_SW_to_BK);
	p2.setMigrationRates(p1, BMIG_BK_to_SW);
}

// set p1 initial population size at same time as population split
s4 20 {
	p1.setSubpopulationSize(NPOP_second_SW);}

// change population 1 size
s5 20 { p1.setSubpopulationSize(NPOP_first_SW); }

// change population 2 size
s6 20 { p2.setSubpopulationSize(NPOP_first_BK); }

//// change population 1 size again
s7 20 { p1.setSubpopulationSize(NPOP_SW); }

//// change population 2 size again
s8 20 { p2.setSubpopulationSize(NPOP_BK); }

// change migration rates
s9 20 {
	p1.setMigrationRates(p2, AMIG_SW_to_BK);
	p2.setMigrationRates(p1, AMIG_BK_to_SW);
}

// check if inversion was lost or fixed every 10 generations
// if inversion lost or fixed, record frequency and end simulation
s13 20 late() {
	if (sim.generation % 10 == 0){
		sweep = sim.mutationsOfType(m2); // record whether inversion is fixed or lost
		if (size(sweep) == 0)
		{
			fixed = (sum(sim.substitutions.mutationType == m2) == 1);
			lines = paste(sim.generation + ":p1_inv:" + (fixed ? "1" else "0")+":p2_inv:" + (fixed ? "1" else "0") + ":inv_f_seln:" + forest_selection+":inv_p_seln:" + prairie_selection+":recombination_rate:"+recombination_rate+":final_gen:"+ final_gen + ':uniq_id:' + uniq_id);
			sim.simulationFinished();
			print(lines);
			writeFile(file_name,lines,append=T);
		}
	}
}

// record inversion frequencies for full populations 
// simulation ends at generation final_gen
s10 100 late() {
	sweep = sim.mutationsOfType(m2); // record whether inversion is fixed or lost
	if (size(sweep) == 0)
	{
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);
		freq_f = (fixed ? "1" else "0");
		freq_p = (fixed ? "1" else "0");
	}
	else{
		freq_f = sim.mutationFrequencies(p1, sweep);
		freq_p = sim.mutationFrequencies(p2, sweep);
	}
	lines = paste(sim.generation + ":p1_inv:" + freq_f+":p2_inv:" + freq_p +":inv_f_seln:" + forest_selection+":inv_p_seln:" + prairie_selection+":recombination_rate:"+recombination_rate+":final_gen:"+ final_gen + ':uniq_id:' + uniq_id);
	writeFile(file_name,lines,append=T);
}

